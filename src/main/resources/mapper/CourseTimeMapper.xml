<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.studentattendancesystem.mapper.CourseTimeMapper">
  <resultMap id="BaseResultMap" type="com.example.studentattendancesystem.model.CourseTime">
    <!--@mbg.generated-->
    <!--@Table course_time-->
    <result column="course_id" property="courseId" />
    <result column="course_week" property="courseWeek" />
    <result column="course_day" property="courseDay" />
    <result column="course_sort" property="courseSort" />
    <result column="teacher_id" property="teacherId" />
    <result column="class_id" property="classId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    course_id, course_week, course_day, course_sort, teacher_id, class_id
  </sql>
  <insert id="insert" parameterType="com.example.studentattendancesystem.model.CourseTime">
    <!--@mbg.generated-->
    insert into course_time (course_id, course_week, course_day, course_sort, teacher_id, class_id
      )
    values (#{courseId}, #{courseWeek}, #{courseDay}, #{courseSort}, #{teacherId}, #{classId}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.studentattendancesystem.model.CourseTime">
    <!--@mbg.generated-->
    insert into course_time
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="courseId != null">
        course_id,
      </if>
      <if test="courseWeek != null">
        course_week,
      </if>
      <if test="courseDay != null">
        course_day,
      </if>
      <if test="courseSort != null">
        course_sort,
      </if>
      <if test="teacherId != null">
        teacher_id,
      </if>
      <if test="classId != null">
        class_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="courseId != null">
        #{courseId},
      </if>
      <if test="courseWeek != null">
        #{courseWeek},
      </if>
      <if test="courseDay != null">
        #{courseDay},
      </if>
      <if test="courseSort != null">
        #{courseSort},
      </if>
      <if test="teacherId != null">
        #{teacherId},
      </if>
      <if test="classId != null">
        #{classId},
      </if>
    </trim>
  </insert>

  <select id="selectByCourseId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from course_time
    where course_id = #{courseId}
  </select>

  <select id="selectAll" resultMap="BaseResultMap">
    SELECT DISTINCT course_id,teacher_id,class_id FROM course_time;
  </select>

  <select id="getSameCourseTime" resultMap="BaseResultMap">
    SELECT * FROM course_time where (class_id = #{classId} or teacher_id = #{teacherId})
             and course_day = #{day} and course_sort = #{time} and course_week = #{week};
  </select>

  <select id="getCourseTimeByAllId" resultMap="BaseResultMap">
    SELECT * FROM course_time where class_id = #{classId} and teacher_id = #{teacherId} and course_id = #{courseId};
  </select>

  <delete id="deleteCourseTime">
    delete from course_time where class_id = #{classId} and teacher_id = #{teacherId} and course_id = #{courseId};
  </delete>

  <select id="selectCourseCountByStudentId" resultType="java.lang.Integer">
    select
    count(1)
    from course_time
    where class_id in (select class_id from student where id = #{studentId})
    and (course_week &lt; #{weekCount} or (course_week = #{weekCount} and course_day &lt; #{dayCount}))
  </select>

    <select id="selectCourseCountByCourseAndStudent" resultType="java.lang.Integer">
    select
    count(1)
    from course_time
    where class_id in (select class_id from student where id = #{studentId}) and  course_id = #{courseId}
    and (course_week &lt; #{weekCount} or (course_week = #{weekCount} and course_day &lt; #{dayCount}))
  </select>

</mapper>